  const nextQuestion = () => {
    if (answer.trim()) {
      handleSubmitAnswer();
    } else {
      moveToNextQuestion();
    }
  };

  const startInterview = () => {
    setInterviewStarted(true);
    setIsLoadingQuestion(true);
  };

  const endSession = () => {
    // If we have answers, finish the interview
    if (answers.filter(a => a.trim()).length > 0) {
      finishInterview(answers);
    } else {
      // Otherwise just reset
      resetInterview();
    }
  };

  const goToResults = () => {
    router.push('/results');
  };

  const resetInterview = () => {
    // Reset all states
    setInterviewStarted(false);
    setInterviewComplete(false);
    setCurrentQuestionIndex(0);
    setQuestions([]);
    setAnswers([]);
    setAnswer('');
    setIsRecording(false);
    setTimeLeft(120);
    setShowFeedback(false);
    setFeedbackScore(null);
    setFeedbackDetails([]);
    setOverallFeedback([]);
    
    if (timerRef.current) {
      clearInterval(timerRef.current);
      timerRef.current = null;
    }
  };

  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
  };

  const getFeedbackEmoji = (score: number) => {
    if (score >= 80) return <FiSmile className="text-emerald-500 dark:text-emerald-400 text-xl" />;
    if (score >= 50) return <FiMeh className="text-yellow-500 dark:text-yellow-400 text-xl" />;
    return <FiFrown className="text-red-500 dark:text-red-400 text-xl" />;
  };

  return (
    <>
      <Navbar />
      <main className="container mx-auto px-4 py-8 max-w-5xl">
        <div className="flex items-center mb-6">
          <Link href="/interview-selection" className="mr-4">
            <button className="p-2 rounded-full bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700">
              <FiArrowLeft className="h-5 w-5 text-gray-700 dark:text-gray-300" />
            </button>
          </Link>
          <div>
            <h1 className="text-2xl font-bold text-gray-900 dark:text-white">
              {interviewTypeMap[interviewType]?.name || 'Interview'} Practice
            </h1>
            <p className="text-gray-600 dark:text-gray-400">
              {interviewTypeMap[interviewType]?.description || 'Practice your interview skills'}
            </p>
          </div>
        </div>
        
        {!interviewStarted && !interviewComplete ? (
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-8">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-4">
                Ready to start your {interviewTypeMap[interviewType]?.name || 'Interview'}?
              </h2>
              <p className="text-gray-600 dark:text-gray-400 mb-6">
                You'll be presented with realistic interview questions. You can answer by typing or using voice recording.
                Our AI will provide feedback on your responses.
              </p>
              
              {/* Interview Mode Selector */}
              <div className="mb-8 max-w-md mx-auto">
                <h3 className="text-lg font-medium text-gray-900 dark:text-white mb-3">Select Interview Mode</h3>
                <div className="flex justify-center space-x-4">
                  <button 
                    onClick={() => setInterviewMode('standard')}
                    className={`px-4 py-2 ${interviewMode === 'standard' ? 'bg-blue-600 text-white' : 'bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300'} rounded-lg font-medium text-sm flex items-center`}
                  >
                    <span>Standard</span>
                  </button>
                  <button 
                    onClick={() => setInterviewMode('stress')}
                    className={`px-4 py-2 ${interviewMode === 'stress' ? 'bg-blue-600 text-white' : 'bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300'} rounded-lg font-medium text-sm flex items-center`}
                  >
                    <span>Stress Test</span>
                  </button>
                  <button 
                    onClick={() => setInterviewMode('rapid')}
                    className={`px-4 py-2 ${interviewMode === 'rapid' ? 'bg-blue-600 text-white' : 'bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300'} rounded-lg font-medium text-sm flex items-center`}
                  >
                    <span>Rapid Fire</span>
                  </button>
                </div>
              </div>
              
              <div className="flex flex-col sm:flex-row justify-center space-y-4 sm:space-y-0 sm:space-x-4">
                <button 
                  onClick={startInterview}
                  className="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg shadow-sm flex items-center justify-center space-x-2"
                  disabled={isLoading}
                >
                  {isLoading ? <FiLoader className="h-5 w-5 animate-spin" /> : <FiCheckCircle className="h-5 w-5" />}
                  <span>Start Interview</span>
                </button>
              </div>
            </div>
          </div>
        ) : interviewComplete && showFeedback ? (
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-8">
            <div className="text-center mb-8">
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white mb-2">
                Interview Complete
              </h2>
              <p className="text-gray-600 dark:text-gray-400">
                Here's your feedback and performance analysis
              </p>
              
              {feedbackScore !== null && (
                <div className="flex justify-center mt-6">
                  <div className="w-32 h-32 rounded-full bg-gray-100 dark:bg-gray-700 flex items-center justify-center relative">
                    <div className="text-4xl font-bold text-gray-900 dark:text-white">{feedbackScore}%</div>
                    <div className="absolute top-0 right-0 bg-white dark:bg-gray-800 rounded-full p-2 shadow-sm">
                      {getFeedbackEmoji(feedbackScore)}
                    </div>
                  </div>
                </div>
              )}
            </div>
            
            <div className="mb-8">
              <h3 className="text-xl font-semibold text-gray-900 dark:text-white mb-4 flex items-center">
                <FiBarChart2 className="mr-2 text-blue-500" />
                Question-by-Question Analysis
              </h3>
              
              <div className="space-y-6">
                {overallFeedback.map((feedback, index) => {
                  return (
                    <div key={index} className="p-4 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-sm">
                      <div className="flex justify-between items-start mb-4">
                        <h4 className="text-lg font-semibold text-gray-900 dark:text-white">Question {index + 1}</h4>
                        <div className="flex items-center bg-gray-100 dark:bg-gray-700 px-3 py-1 rounded-full">
                          {getFeedbackEmoji(feedback.score)}
                          <span className="ml-1 font-medium text-gray-900 dark:text-white">{feedback.score}%</span>
                        </div>
                      </div>
                      
                      <div className="mb-4">
                        <p className="text-gray-700 dark:text-gray-300 font-medium mb-2">Question:</p>
                        <div className="p-3 bg-gray-50 dark:bg-gray-900/50 rounded border border-gray-200 dark:border-gray-700">
                          {questions[index].split('\n\n').map((paragraph, idx) => {
                            // Check if this paragraph contains numbered points
                            if (paragraph.includes('\n1.') || paragraph.includes('Please address the following aspects:')) {
                              const [header, ...points] = paragraph.split('\n');
                              return (
                                <div key={idx} className="mb-3">
                                  {header && <p className="text-gray-800 dark:text-gray-200 font-medium mb-2">{header}</p>}
                                  <ul className="list-decimal pl-5 space-y-1">
                                    {points.map((point, pointIdx) => {
                                      // Remove the numbering if it exists
                                      const cleanPoint = point.replace(/^\d+\.\s*/, '');
                                      return (
                                        <li key={pointIdx} className="text-gray-800 dark:text-gray-200">
                                          {cleanPoint}
                                        </li>
                                      );
                                    })}
                                  </ul>
                                </div>
                              );
                            } 
                            // Check if this paragraph contains bullet points
                            else if (paragraph.includes('\nâ€¢') || paragraph.includes('Be prepared to discuss:')) {
                              const [header, ...points] = paragraph.split('\n');
                              return (
                                <div key={idx} className="mb-3">
                                  {header && <p className="text-gray-800 dark:text-gray-200 font-medium mb-2">{header}</p>}
                                  <ul className="list-disc pl-5 space-y-1">
                                    {points.map((point, pointIdx) => {
                                      // Remove the bullet if it exists
                                      const cleanPoint = point.replace(/^â€¢\s*/, '');
                                      return (
                                        <li key={pointIdx} className="text-gray-800 dark:text-gray-200">
                                          {cleanPoint}
                                        </li>
                                      );
                                    })}
                                  </ul>
                                </div>
                              );
                            } 
                            // Regular paragraph
                            else {
                              return <p key={idx} className="text-gray-800 dark:text-gray-200 mb-3">{paragraph}</p>;
                            }
                          })}
                        </div>
                      </div>
                      
                      <div className="mb-4">
                        <p className="text-gray-700 dark:text-gray-300 font-medium mb-2">Your Answer:</p>
                        <p className="text-gray-800 dark:text-gray-200">{answers[index]}</p>
                      </div>
                      
                      <div className="space-y-4">
                        {feedback.summary && (
                          <div className="p-3 bg-blue-50 dark:bg-blue-900/20 rounded border border-blue-100 dark:border-blue-800">
                            <p className="text-gray-800 dark:text-gray-200 italic">{feedback.summary}</p>
                          </div>
                        )}
                        
                        {feedback.strengths && feedback.strengths.length > 0 && (
                          <div>
                            <p className="text-gray-700 dark:text-gray-300 font-medium mb-2">Strengths:</p>
                            <ul className="space-y-1">
                              {feedback.strengths.map((point: string, i: number) => (
                                <li key={i} className="flex items-start">
                                  <span className="text-green-600 dark:text-green-400 mr-2">âœ“</span>
                                  <span className="text-gray-700 dark:text-gray-300">{point}</span>
                                </li>
                              ))}
                            </ul>
                          </div>
                        )}
                        
                        {feedback.improvements && feedback.improvements.length > 0 && (
                          <div>
                            <p className="text-gray-700 dark:text-gray-300 font-medium mb-2">Areas for Improvement:</p>
                            <ul className="space-y-1">
                              {feedback.improvements.map((point: string, i: number) => (
                                <li key={i} className="flex items-start">
                                  <span className="text-amber-600 dark:text-amber-400 mr-2">â€¢</span>
                                  <span className="text-gray-700 dark:text-gray-300">{point}</span>
                                </li>
                              ))}
                            </ul>
                          </div>
                        )}
                        
                        {feedback.details && feedback.details.length > 0 && (
                          <div>
                            <p className="text-gray-700 dark:text-gray-300 font-medium mb-2">Detailed Feedback:</p>
                            <ul className="space-y-1">
                              {feedback.details.map((point: string, i: number) => (
                                <li key={i} className="flex items-start">
                                  <span className="text-blue-600 dark:text-blue-400 mr-2">â€¢</span>
                                  <span className="text-gray-700 dark:text-gray-300">{point}</span>
                                </li>
                              ))}
                            </ul>
                          </div>
                        )}
                      </div>
                    </div>
                  );
                })}
              </div>
            </div>
            
            <div className="flex justify-center space-x-4">
              <button 
                onClick={resetInterview}
                className="px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg shadow-sm flex items-center justify-center space-x-2"
              >
                <span>Start New Interview</span>
              </button>
            </div>
          </div>
        ) : (
          <>
          <motion.div 
            className="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6"
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3 }}
          >
            <div className="mb-4 flex justify-between items-center">
              <div className="flex items-center">
                <span className="text-gray-700 dark:text-gray-300 font-medium">
                  Question {currentQuestionIndex + 1} of {questions.length}
                </span>
                {(interviewMode === 'rapid' || interviewMode === 'stress') && (
                  <div className="ml-4 flex items-center text-gray-700 dark:text-gray-300">
                    <FiClock className="mr-1" />
                    <span>{formatTime(timeLeft)}</span>
                  </div>
                )}
              </div>
              
              {feedbackScore !== null && !isLoadingFeedback && (
                <div className="absolute top-4 right-4 flex items-center space-x-2 bg-white dark:bg-gray-800 p-2 rounded-full shadow-sm">
                  {getFeedbackEmoji(feedbackScore || 0)}
                  <span className={`font-medium ${
                    feedbackScore >= 80 ? 'text-emerald-600 dark:text-emerald-400' : 
                    feedbackScore >= 50 ? 'text-yellow-600 dark:text-yellow-400' : 
                    'text-red-600 dark:text-red-400'
                  }`}>
                    {feedbackScore}%
                  </span>
                </div>
              )}
            </div>
            
            <div className="mb-6">
              {isLoadingQuestion ? (
                <div className="flex justify-center items-center py-12">
                  <FiLoader className="animate-spin h-8 w-8 text-blue-600" />
                  <span className="ml-3 text-gray-700 dark:text-gray-300">Generating question...</span>
                </div>
              ) : (
                <div className="mb-6">
                  <h2 className="text-xl font-semibold mb-2">Question {currentQuestionIndex + 1}:</h2>
                  <div className="p-4 bg-white dark:bg-gray-800 rounded-lg shadow mb-4">
                    {questions[currentQuestionIndex].split('\n\n').map((paragraph, idx) => {
                      // Check if this paragraph contains numbered points
                      if (paragraph.includes('\n1.') || paragraph.includes('Please address the following aspects:')) {
                        const [header, ...points] = paragraph.split('\n');
                        return (
                          <div key={idx} className="mb-3">
                            {header && <p className="text-gray-800 dark:text-gray-200 font-medium mb-2">{header}</p>}
                            <ul className="list-decimal pl-5 space-y-1">
                              {points.map((point, pointIdx) => {
                                // Remove the numbering if it exists
                                const cleanPoint = point.replace(/^\d+\.\s*/, '');
                                return (
                                  <li key={pointIdx} className="text-gray-800 dark:text-gray-200">
                                    {cleanPoint}
                                  </li>
                                );
                              })}
                            </ul>
                          </div>
                        );
                      } 
                      // Check if this paragraph contains bullet points
                      else if (paragraph.includes('\nâ€¢') || paragraph.includes('Be prepared to discuss:')) {
                        const [header, ...points] = paragraph.split('\n');
                        return (
                          <div key={idx} className="mb-3">
                            {header && <p className="text-gray-800 dark:text-gray-200 font-medium mb-2">{header}</p>}
                            <ul className="list-disc pl-5 space-y-1">
                              {points.map((point, pointIdx) => {
                                // Remove the bullet if it exists
                                const cleanPoint = point.replace(/^â€¢\s*/, '');
                                return (
                                  <li key={pointIdx} className="text-gray-800 dark:text-gray-200">
                                    {cleanPoint}
                                  </li>
                                );
                              })}
                            </ul>
                          </div>
                        );
                      } 
                      // Regular paragraph
                      else {
                        return <p key={idx} className="text-gray-800 dark:text-gray-200 mb-3">{paragraph}</p>;
                      }
                    })}
                  </div>
                  
                  <div className="mb-4">
                    <label htmlFor="answer" className="block text-gray-700 dark:text-gray-300 font-medium mb-2">
                      Your Answer:
                    </label>
                    <textarea
                      id="answer"
                      className="w-full h-40 p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-800 text-gray-800 dark:text-gray-200 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      placeholder="Type your answer here..."
                      value={answer}
                      onChange={(e) => setAnswer(e.target.value)}
                      disabled={isRecording}
                    ></textarea>
                  </div>
                </div>
              )}
            </div>

            <div className="flex flex-col sm:flex-row items-center justify-center space-y-4 sm:space-y-0 sm:space-x-4">
              {!isRecording ? (
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={startRecording}
                  className="w-full sm:w-auto px-6 py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg shadow-sm flex items-center justify-center space-x-2"
                  disabled={feedbackScore !== null}
                >
                  <FiMic className="h-5 w-5" />
                  <span>Start Recording</span>
                </motion.button>
              ) : (
                <motion.button
                  whileHover={{ scale: 1.05 }}
                  whileTap={{ scale: 0.95 }}
                  onClick={stopRecording}
                  className="w-full sm:w-auto px-6 py-3 bg-red-600 hover:bg-red-700 text-white font-medium rounded-lg shadow-sm flex items-center justify-center space-x-2"
                >
                  <FiMicOff className="h-5 w-5" />
                  <span>Stop Recording</span>
                </motion.button>
              )}

              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={nextQuestion}
                className="w-full sm:w-auto px-6 py-3 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-800 dark:text-white font-medium rounded-lg shadow-sm flex items-center justify-center space-x-2"
                disabled={isRecording}
              >
                <FiChevronRight className="h-5 w-5" />
                <span>Next Question</span>
              </motion.button>

              <motion.button
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
                onClick={endSession}
                className="w-full sm:w-auto px-6 py-3 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 text-gray-800 dark:text-white font-medium rounded-lg shadow-sm flex items-center justify-center space-x-2"
                disabled={isRecording}
              >
                <FiX className="h-5 w-5" />
                <span>End Session</span>
              </motion.button>
            </div>
          </motion.div>
          
          {/* Interview Progress Information */}
          <div className="mt-6 bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-4 flex items-center">
              <FiSmile className="mr-2 text-blue-500" />
              Interview Progress
            </h2>
            <div className="space-y-4">
              <div className="p-4 bg-blue-50 dark:bg-blue-900/20 rounded-lg border border-blue-100 dark:border-blue-800">
                <p className="text-gray-800 dark:text-gray-200 mb-2 font-medium">Instructions:</p>
                <ul className="space-y-2">
                  <li className="flex items-start">
                    <span className="text-blue-600 dark:text-blue-400 mr-2">â€¢</span>
                    <span className="text-gray-700 dark:text-gray-300">Answer all questions to complete the interview</span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-blue-600 dark:text-blue-400 mr-2">â€¢</span>
                    <span className="text-gray-700 dark:text-gray-300">You'll receive detailed feedback after completing all questions</span>
                  </li>
                  <li className="flex items-start">
                    <span className="text-blue-600 dark:text-blue-400 mr-2">â€¢</span>
                    <span className="text-gray-700 dark:text-gray-300">Try to be specific and provide examples in your answers</span>
                  </li>
                </ul>
              </div>
              
              <div className="flex space-x-4">
                <button 
                  className="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium text-sm flex items-center justify-center"
                  disabled={isLoadingQuestion || isRecording}
                  onClick={() => setAnswer("I would approach this by analyzing the data, consulting with stakeholders, and implementing a solution based on best practices. I've handled similar situations in the past with positive outcomes.")}
                >
                  <span>Sample Answer Format</span>
                </button>
                <button 
                  className="flex-1 px-4 py-2 bg-emerald-600 hover:bg-emerald-700 text-white rounded-lg font-medium text-sm flex items-center justify-center"
                  onClick={endSession}
                  disabled={isLoadingQuestion || isRecording || answers.filter(a => a.trim()).length === 0}
                >
                  <span>Finish Interview</span>
                </button>
              </div>
            </div>
          </div>
          </>
        )}
      </main>
    </>
  );
}
